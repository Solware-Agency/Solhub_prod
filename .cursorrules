# Solhub - Multi-tenant SaaS para Laboratorios Cl√≠nicos en Venezuela

## üìã Contexto del Proyecto

**Nombre**: Solhub
**Tipo**: SaaS multi-tenant para laboratorios cl√≠nicos
**Pa√≠s**: Venezuela
**Cliente inicial**: Conspat (laboratorio de patolog√≠a)
**Stack**: React + TypeScript + Supabase + Vercel

### El Problema

Inicialmente el proyecto fue dise√±ado como single-tenant (para un solo laboratorio: Conspat).
Ahora se necesita convertir a multi-tenant SaaS para servir a m√∫ltiples laboratorios en Venezuela,
cada uno con sus propias necesidades y features espec√≠ficas.

### La Soluci√≥n

Implementar arquitectura **Multi-tenancy con Row-Level Security (RLS)** usando:

- **Shared Database, Shared Schema**: Todos los laboratorios usan las mismas tablas
- **Tenant Isolation**: Columna `laboratory_id` en todas las tablas principales
- **Feature Flags**: Configuraci√≥n JSON por laboratorio para habilitar/deshabilitar funcionalidades
- **Un solo repositorio**: Todo el c√≥digo en la rama `main`, features condicionadas por configuraci√≥n

### Por qu√© esta soluci√≥n

- ‚úÖ Un solo codebase = f√°cil mantenimiento
- ‚úÖ Features compartidas autom√°ticamente entre labs
- ‚úÖ Agregar nuevos laboratorios es trivial
- ‚úÖ Costo-eficiente (una infraestructura)
- ‚úÖ Supabase tiene RLS nativo para multi-tenancy

---

## üèóÔ∏è Arquitectura T√©cnica

### Patr√≥n: Multi-tenancy con Row-Level Security

- **Database Level**: PostgreSQL con RLS policies por `laboratory_id`
- **Application Level**: Feature flags y configuraci√≥n por laboratorio
- **User Level**: Cada usuario pertenece a UN laboratorio

### Stack Tecnol√≥gico Actual

```
Frontend:
- React 18.2.0 + TypeScript
- Vite 6.3.5
- React Router v6
- TailwindCSS 4.1.12
- Radix UI + shadcn/ui
- React Hook Form + Zod
- TanStack Query
- Framer Motion

Backend:
- Supabase (@supabase/supabase-js 2.50.2)
  - PostgreSQL (con RLS)
  - Auth
  - Storage
  - Edge Functions
- Express (backend adicional para emails/PDFs)
- Nodemailer para emails
- jsPDF + pdf-lib para generaci√≥n de PDFs

Hosting:
- Frontend: Vercel
- Backend API: Vercel Serverless Functions
- Database: Supabase Cloud

Package Manager: pnpm 10.17.1
```

---

## üìä Plan de Migraci√≥n Completo

### FASE 1: Base de Datos (PRIMERO) ‚ö†Ô∏è CR√çTICO

#### 1.1 Crear tabla `laboratories` (tabla maestra)

```sql
create table public.laboratories (
  id uuid primary key default gen_random_uuid(),
  slug text unique not null, -- 'conspat', 'labvargas', etc
  name text not null, -- 'Conspat', 'Laboratorio Vargas'
  status text default 'active' check (status in ('active', 'inactive', 'trial')),

  -- Configuraci√≥n de features habilitadas
  features jsonb default '{
    "hasInmunoRequests": true,
    "hasChangelogModule": true,
    "hasChatAI": true,
    "hasMultipleBranches": true,
    "hasCitologyStatus": true,
    "hasPatientOriginFilter": true,
    "hasRobotTracking": false
  }'::jsonb,

  -- Branding personalizado
  branding jsonb default '{
    "logo": null,
    "primaryColor": "#0066cc",
    "secondaryColor": "#00cc66"
  }'::jsonb,

  -- Configuraci√≥n espec√≠fica del laboratorio
  config jsonb default '{
    "branches": ["Principal"],
    "paymentMethods": ["Efectivo", "Zelle", "Pago M√≥vil", "Transferencia"],
    "defaultExchangeRate": 36.5,
    "timezone": "America/Caracas"
  }'::jsonb,

  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

-- √çndice para b√∫squedas por slug
create index idx_laboratories_slug on laboratories(slug);

-- RLS para laboratories
alter table public.laboratories enable row level security;

-- Policy: Todos pueden leer laboratorios activos
create policy "Anyone can view active laboratories"
on laboratories for select
using (status = 'active');

-- Policy: Solo admins pueden modificar
create policy "Only admins can modify laboratories"
on laboratories for all
using (
  exists (
    select 1 from profiles
    where profiles.id = auth.uid()
    and profiles.role = 'owner'
  )
);
```

#### 1.2 Agregar `laboratory_id` a TODAS las tablas principales

```sql
-- PATIENTS
alter table public.patients
add column laboratory_id uuid references public.laboratories(id);

create index idx_patients_laboratory on patients(laboratory_id);

-- MEDICAL_RECORDS_CLEAN
alter table public.medical_records_clean
add column laboratory_id uuid references public.laboratories(id);

create index idx_medical_records_laboratory on medical_records_clean(laboratory_id);

-- PROFILES
alter table public.profiles
add column laboratory_id uuid references public.laboratories(id);

create index idx_profiles_laboratory on profiles(laboratory_id);

-- CHANGE_LOGS
alter table public.change_logs
add column laboratory_id uuid references public.laboratories(id);

create index idx_change_logs_laboratory on change_logs(laboratory_id);

-- IMMUNO_REQUESTS
alter table public.immuno_requests
add column laboratory_id uuid references public.laboratories(id);

create index idx_immuno_requests_laboratory on immuno_requests(laboratory_id);

-- USER_SETTINGS
alter table public.user_settings
add column laboratory_id uuid references public.laboratories(id);

create index idx_user_settings_laboratory on user_settings(laboratory_id);

-- DELETION_LOGS
alter table public.deletion_logs
add column laboratory_id uuid references public.laboratories(id);

create index idx_deletion_logs_laboratory on deletion_logs(laboratory_id);
```

#### 1.3 Migrar datos existentes a Conspat

```sql
-- Crear laboratorio Conspat
insert into public.laboratories (
  slug,
  name,
  status,
  features,
  branding,
  config
) values (
  'conspat',
  'Conspat',
  'active',
  '{
    "hasInmunoRequests": true,
    "hasChangelogModule": true,
    "hasChatAI": true,
    "hasMultipleBranches": true,
    "hasCitologyStatus": true,
    "hasPatientOriginFilter": true,
    "hasRobotTracking": false
  }'::jsonb,
  '{
    "logo": "/logos/conspat.png",
    "primaryColor": "#0066cc",
    "secondaryColor": "#00cc66"
  }'::jsonb,
  '{
    "branches": ["Principal", "Sucursal 2"],
    "paymentMethods": ["Efectivo", "Zelle", "Pago M√≥vil", "Transferencia", "Punto de Venta"],
    "defaultExchangeRate": 36.5,
    "timezone": "America/Caracas"
  }'::jsonb
)
returning id; -- GUARDAR ESTE ID

-- Asignar TODOS los registros existentes a Conspat
-- (Reemplazar 'CONSPAT_UUID' con el ID obtenido arriba)
update public.patients
set laboratory_id = 'CONSPAT_UUID';

update public.medical_records_clean
set laboratory_id = 'CONSPAT_UUID';

update public.profiles
set laboratory_id = 'CONSPAT_UUID';

update public.change_logs
set laboratory_id = 'CONSPAT_UUID';

update public.immuno_requests
set laboratory_id = 'CONSPAT_UUID';

update public.user_settings
set laboratory_id = 'CONSPAT_UUID';

update public.deletion_logs
set laboratory_id = 'CONSPAT_UUID';
```

#### 1.4 Hacer `laboratory_id` obligatorio (despu√©s de migrar)

```sql
-- Una vez que TODOS los registros tienen laboratory_id
alter table public.patients
alter column laboratory_id set not null;

alter table public.medical_records_clean
alter column laboratory_id set not null;

alter table public.profiles
alter column laboratory_id set not null;

-- Repetir para todas las tablas
```

#### 1.5 Actualizar RLS Policies (MUY CR√çTICO)

```sql
-- PATIENTS
drop policy if exists "Users can view patients" on patients;
create policy "Users can view their laboratory patients"
on patients for select
using (
  laboratory_id = (
    select laboratory_id from profiles where id = auth.uid()
  )
);

drop policy if exists "Users can insert patients" on patients;
create policy "Users can insert patients in their laboratory"
on patients for insert
with check (
  laboratory_id = (
    select laboratory_id from profiles where id = auth.uid()
  )
);

drop policy if exists "Users can update patients" on patients;
create policy "Users can update their laboratory patients"
on patients for update
using (
  laboratory_id = (
    select laboratory_id from profiles where id = auth.uid()
  )
);

-- MEDICAL_RECORDS_CLEAN
drop policy if exists "Users can view records" on medical_records_clean;
create policy "Users can view their laboratory records"
on medical_records_clean for select
using (
  laboratory_id = (
    select laboratory_id from profiles where id = auth.uid()
  )
);

drop policy if exists "Users can insert records" on medical_records_clean;
create policy "Users can insert records in their laboratory"
on medical_records_clean for insert
with check (
  laboratory_id = (
    select laboratory_id from profiles where id = auth.uid()
  )
);

drop policy if exists "Users can update records" on medical_records_clean;
create policy "Users can update their laboratory records"
on medical_records_clean for update
using (
  laboratory_id = (
    select laboratory_id from profiles where id = auth.uid()
  )
);

-- PROFILES
drop policy if exists "Users can view profiles" on profiles;
create policy "Users can view their laboratory profiles"
on profiles for select
using (
  laboratory_id = (
    select laboratory_id from profiles where id = auth.uid()
  )
);

-- REPETIR PARA TODAS LAS TABLAS: change_logs, immuno_requests, user_settings, deletion_logs
```

---

### FASE 2: C√≥digo (SEGUNDO)

#### 2.1 Actualizar tipos TypeScript

```typescript
// src/shared/types/types.ts

// Agregar interfaz para Laboratory
export interface Laboratory {
	id: string
	slug: string
	name: string
	status: 'active' | 'inactive' | 'trial'
	features: LaboratoryFeatures
	branding: LaboratoryBranding
	config: LaboratoryConfig
	created_at: string
	updated_at: string
}

export interface LaboratoryFeatures {
	hasInmunoRequests: boolean
	hasChangelogModule: boolean
	hasChatAI: boolean
	hasMultipleBranches: boolean
	hasCitologyStatus: boolean
	hasPatientOriginFilter: boolean
	hasRobotTracking: boolean
}

export interface LaboratoryBranding {
	logo?: string
	primaryColor: string
	secondaryColor: string
}

export interface LaboratoryConfig {
	branches: string[]
	paymentMethods: string[]
	defaultExchangeRate: number
	timezone: string
}

// Agregar laboratory_id a interfaces existentes
export interface MedicalRecord {
	id: string
	laboratory_id: string // NUEVO
	patient_id: string | null
	// ... resto de campos
}

// Agregar a Database types
export type Database = {
	public: {
		Tables: {
			laboratories: {
				Row: Laboratory
				Insert: Omit<Laboratory, 'id' | 'created_at' | 'updated_at'>
				Update: Partial<Omit<Laboratory, 'id' | 'created_at' | 'updated_at'>>
			}
			// ... resto de tablas
		}
	}
}
```

#### 2.2 Crear LaboratoryContext

```typescript
// src/app/providers/LaboratoryContext.tsx

import { createContext, useContext, useEffect, useState } from 'react'
import { supabase } from '@/services/supabase/config/supabase-client'
import { useAuth } from './AuthContext'
import type { Laboratory } from '@/shared/types/types'

interface LaboratoryContextType {
	laboratory: Laboratory | null
	isLoading: boolean
	refreshLaboratory: () => Promise<void>
}

const LaboratoryContext = createContext<LaboratoryContextType | undefined>(undefined)

export function LaboratoryProvider({ children }: { children: React.ReactNode }) {
	const { user } = useAuth()
	const [laboratory, setLaboratory] = useState<Laboratory | null>(null)
	const [isLoading, setIsLoading] = useState(true)

	const loadLaboratory = async () => {
		if (!user) {
			setLaboratory(null)
			setIsLoading(false)
			return
		}

		try {
			// Obtener laboratory_id del perfil del usuario
			const { data: profile, error: profileError } = await supabase
				.from('profiles')
				.select('laboratory_id')
				.eq('id', user.id)
				.single()

			if (profileError || !profile?.laboratory_id) {
				console.error('Error loading user profile:', profileError)
				setLaboratory(null)
				setIsLoading(false)
				return
			}

			// Cargar datos completos del laboratorio
			const { data: lab, error: labError } = await supabase
				.from('laboratories')
				.select('*')
				.eq('id', profile.laboratory_id)
				.single()

			if (labError || !lab) {
				console.error('Error loading laboratory:', labError)
				setLaboratory(null)
				setIsLoading(false)
				return
			}

			setLaboratory(lab)
		} catch (error) {
			console.error('Unexpected error loading laboratory:', error)
			setLaboratory(null)
		} finally {
			setIsLoading(false)
		}
	}

	useEffect(() => {
		loadLaboratory()
	}, [user])

	const refreshLaboratory = async () => {
		setIsLoading(true)
		await loadLaboratory()
	}

	return (
		<LaboratoryContext.Provider value={{ laboratory, isLoading, refreshLaboratory }}>
			{children}
		</LaboratoryContext.Provider>
	)
}

export function useLaboratory() {
	const context = useContext(LaboratoryContext)
	if (!context) {
		throw new Error('useLaboratory must be used within LaboratoryProvider')
	}
	return context
}
```

#### 2.3 Crear FeatureGuard component

```typescript
// src/shared/components/FeatureGuard.tsx

import { useLaboratory } from '@/app/providers/LaboratoryContext'
import type { LaboratoryFeatures } from '@/shared/types/types'

interface FeatureGuardProps {
	feature: keyof LaboratoryFeatures
	children: React.ReactNode
	fallback?: React.ReactNode
}

export function FeatureGuard({ feature, children, fallback = null }: FeatureGuardProps) {
	const { laboratory } = useLaboratory()

	if (!laboratory?.features[feature]) {
		return <>{fallback}</>
	}

	return <>{children}</>
}

// Ejemplo de uso:
// <FeatureGuard feature="hasChatAI">
//   <ChatButton />
// </FeatureGuard>
```

#### 2.4 Actualizar servicios Supabase

```typescript
// src/services/supabase/patients/patients-service.ts

export async function fetchPatients() {
	// El RLS autom√°ticamente filtra por laboratory_id del usuario
	// Pero es buena pr√°ctica ser expl√≠cito
	const {
		data: { user },
	} = await supabase.auth.getUser()
	if (!user) throw new Error('Not authenticated')

	const { data: profile } = await supabase.from('profiles').select('laboratory_id').eq('id', user.id).single()

	if (!profile?.laboratory_id) {
		throw new Error('User has no laboratory assigned')
	}

	const { data, error } = await supabase
		.from('patients')
		.select('*')
		.eq('laboratory_id', profile.laboratory_id) // FILTRO EXPL√çCITO
		.order('created_at', { ascending: false })

	if (error) throw error
	return data
}

export async function createPatient(patientData: PatientInsert) {
	const {
		data: { user },
	} = await supabase.auth.getUser()
	if (!user) throw new Error('Not authenticated')

	const { data: profile } = await supabase.from('profiles').select('laboratory_id').eq('id', user.id).single()

	if (!profile?.laboratory_id) {
		throw new Error('User has no laboratory assigned')
	}

	// SIEMPRE incluir laboratory_id al insertar
	const { data, error } = await supabase
		.from('patients')
		.insert({
			...patientData,
			laboratory_id: profile.laboratory_id, // CR√çTICO
		})
		.select()
		.single()

	if (error) throw error
	return data
}

// REPETIR PATR√ìN PARA TODOS LOS SERVICIOS
```

#### 2.5 Actualizar App.tsx

```typescript
// src/App.tsx

import { LaboratoryProvider } from '@/app/providers/LaboratoryContext'

function App() {
	return (
		<QueryClientProvider client={queryClient}>
			<ThemeProvider>
				<AuthProvider>
					<LaboratoryProvider>
						{' '}
						{/* NUEVO - Despu√©s de AuthProvider */}
						<DateRangeProvider>
							<SessionTimeoutProvider>
								<RouterProvider router={router} />
								<Toaster />
							</SessionTimeoutProvider>
						</DateRangeProvider>
					</LaboratoryProvider>
				</AuthProvider>
			</ThemeProvider>
		</QueryClientProvider>
	)
}
```

#### 2.6 Actualizar Header para mostrar laboratorio

```typescript
// src/features/dashboard/layouts/Header.tsx

import { useLaboratory } from '@/app/providers/LaboratoryContext'

export function Header() {
	const { laboratory } = useLaboratory()

	return (
		<header>
			{laboratory?.branding.logo && <img src={laboratory.branding.logo} alt={laboratory.name} />}
			<h1>{laboratory?.name}</h1>
			{/* resto del header */}
		</header>
	)
}
```

---

### FASE 3: Subdominios (OPCIONAL - RECOMENDADO DESPU√âS)

**Decisi√≥n**: Implementar DESPU√âS de validar con 2-3 laboratorios.

#### Opci√≥n A: Sin subdominios (M√ÅS SIMPLE - EMPEZAR AQU√ç)

- Usuario hace login normal
- Sistema detecta su `laboratory_id` del perfil
- Todo se filtra autom√°ticamente por RLS

#### Opci√≥n B: Con subdominios (DESPU√âS)

- `conspat.solhub.app`
- `vargas.solhub.app`
- Requiere configuraci√≥n en Vercel + detecci√≥n de subdominio

**Recomendaci√≥n**: Empezar con Opci√≥n A, migrar a B cuando tengas 5+ laboratorios.

---

## üö® Reglas de Implementaci√≥n CR√çTICAS

### Seguridad (NON-NEGOTIABLE)

1. **NUNCA** hacer queries sin filtrar por `laboratory_id`
2. **SIEMPRE** validar que RLS est√° habilitado en tablas nuevas
3. **SIEMPRE** verificar que el usuario pertenece al laboratorio antes de operaciones cr√≠ticas
4. **LOGUEAR** todos los accesos a datos sensibles en `change_logs`
5. **TESTEAR** exhaustivamente el aislamiento de datos entre laboratorios

### C√≥digo

1. Usar `<FeatureGuard>` para condicionar UI por features
2. Usar `useLaboratory()` hook para acceder al laboratorio actual
3. NUNCA hardcodear configuraci√≥n de laboratorios en c√≥digo
4. Mantener configuraci√≥n en tabla `laboratories` de Supabase
5. Todo servicio de Supabase DEBE incluir `.eq('laboratory_id', laboratoryId)`
6. Al insertar datos, SIEMPRE incluir `laboratory_id`

### Base de Datos

1. Toda tabla nueva DEBE tener `laboratory_id uuid references laboratories(id)`
2. Crear √≠ndice en `laboratory_id` para performance
3. Configurar RLS policies para filtrar por `laboratory_id`
4. Backups regulares con `pg_dump`

### UX

1. Mostrar logo y nombre del laboratorio en header
2. Indicador visual claro de qu√© laboratorio est√° activo
3. En login, mostrar el laboratorio correspondiente
4. Mensajes de error espec√≠ficos por laboratorio
5. Permitir customizaci√≥n de colores seg√∫n branding

---

## üìÅ Estructura de Archivos Nuevos

```
src/
‚îú‚îÄ‚îÄ app/
‚îÇ   ‚îî‚îÄ‚îÄ providers/
‚îÇ       ‚îî‚îÄ‚îÄ LaboratoryContext.tsx          # NUEVO
‚îú‚îÄ‚îÄ shared/
‚îÇ   ‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ FeatureGuard.tsx               # NUEVO
‚îÇ   ‚îú‚îÄ‚îÄ hooks/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ useLaboratoryConfig.ts         # NUEVO
‚îÇ   ‚îî‚îÄ‚îÄ utils/
‚îÇ       ‚îî‚îÄ‚îÄ laboratory-utils.ts            # NUEVO (helpers)
‚îî‚îÄ‚îÄ services/
    ‚îî‚îÄ‚îÄ supabase/
        ‚îî‚îÄ‚îÄ laboratories/
            ‚îî‚îÄ‚îÄ laboratories-service.ts     # NUEVO

supabase/
‚îî‚îÄ‚îÄ migrations/
    ‚îú‚îÄ‚îÄ YYYYMMDDHHMMSS_create_laboratories_table.sql          # NUEVO
    ‚îú‚îÄ‚îÄ YYYYMMDDHHMMSS_add_laboratory_id_to_tables.sql        # NUEVO
    ‚îú‚îÄ‚îÄ YYYYMMDDHHMMSS_migrate_existing_data_to_conspat.sql   # NUEVO
    ‚îú‚îÄ‚îÄ YYYYMMDDHHMMSS_make_laboratory_id_required.sql        # NUEVO
    ‚îî‚îÄ‚îÄ YYYYMMDDHHMMSS_update_rls_policies_for_multitenant.sql # NUEVO
```

---

## üîÑ Estado de Migraci√≥n

**Fase actual**: PLANNING (no iniciado)

- [ ] Fase 1.1: Crear tabla `laboratories`
- [ ] Fase 1.2: Agregar `laboratory_id` a tablas
- [ ] Fase 1.3: Migrar datos existentes a Conspat
- [ ] Fase 1.4: Hacer `laboratory_id` obligatorio
- [ ] Fase 1.5: Actualizar RLS policies
- [ ] Fase 2.1: Actualizar tipos TypeScript
- [ ] Fase 2.2: Crear LaboratoryContext
- [ ] Fase 2.3: Crear FeatureGuard
- [ ] Fase 2.4: Actualizar servicios Supabase
- [ ] Fase 2.5: Actualizar App.tsx
- [ ] Fase 2.6: Actualizar Header
- [ ] Testing exhaustivo
- [ ] Deploy a producci√≥n
- [ ] Validaci√≥n con usuarios Conspat

---

## üéØ Orden de Implementaci√≥n Recomendado

### Sprint 1 (Base de Datos) - 5 d√≠as

1. D√≠a 1: Crear migraci√≥n para tabla `laboratories`
2. D√≠a 2: Crear migraci√≥n para agregar `laboratory_id` a todas las tablas
3. D√≠a 3: Migrar datos existentes a Conspat
4. D√≠a 4: Actualizar RLS policies
5. D√≠a 5: Testing de seguridad y validaci√≥n

### Sprint 2 (C√≥digo Frontend) - 5 d√≠as

1. D√≠a 1: Actualizar tipos TypeScript
2. D√≠a 2: Crear LaboratoryContext y FeatureGuard
3. D√≠a 3: Actualizar servicios de pacientes y casos
4. D√≠a 4: Actualizar servicios de usuarios y settings
5. D√≠a 5: Actualizar UI (Header, Dashboard, etc.)

### Sprint 3 (Testing y Deploy) - 3 d√≠as

1. D√≠a 1: Testing exhaustivo de aislamiento de datos
2. D√≠a 2: Testing de features por laboratorio
3. D√≠a 3: Deploy a producci√≥n y validaci√≥n

**Total estimado: 2-3 semanas**

---

## üß™ Testing Checklist

### Seguridad (CR√çTICO)

- [ ] Usuario Lab A NO puede ver pacientes de Lab B
- [ ] Usuario Lab A NO puede ver casos de Lab B
- [ ] Usuario Lab A NO puede modificar datos de Lab B
- [ ] RLS bloquea acceso directo a datos de otros labs
- [ ] Login con credenciales de Lab A no da acceso a Lab B

### Funcionalidad

- [ ] Crear paciente asigna correcto `laboratory_id`
- [ ] Crear caso asigna correcto `laboratory_id`
- [ ] Filtros funcionan solo con datos del laboratorio actual
- [ ] Features se muestran/ocultan seg√∫n configuraci√≥n
- [ ] Branding se aplica correctamente por laboratorio

### Performance

- [ ] Queries con `laboratory_id` usan √≠ndices
- [ ] No hay N+1 queries al cargar laboratorio
- [ ] Dashboard carga en < 2 segundos

---

## üìö Recursos y Referencias

### Documentaci√≥n Supabase Multi-tenancy

- https://supabase.com/docs/guides/auth/row-level-security
- https://supabase.com/docs/guides/database/postgres/row-level-security

### Patrones de Multi-tenancy

- Shared Database, Shared Schema (elegido)
- Database per Tenant (no recomendado para SaaS peque√±o/mediano)
- Schema per Tenant (complejidad innecesaria)

---

## üí° Notas Importantes

### Particularidades Venezuela

- Pagos en USD pero con tasa de cambio a VES
- Campo `exchange_rate` en `medical_records_clean`
- M√©todos de pago: Efectivo, Zelle, Pago M√≥vil, Transferencia
- Sistema de salud privado, laboratorios independientes

### Tipos de Ex√°menes (Variables por Laboratorio)

**Nota**: Los tipos de ex√°menes var√≠an significativamente entre laboratorios. El sistema debe ser flexible para soportar diferentes especialidades.

**Ejemplos comunes:**

- Patolog√≠a (biopsias, citolog√≠as) - Conspat
- Inmunorreacciones (inmunofluorescencia, inmunohistoqu√≠mica)
- Hematolog√≠a (hemogramas, coagulaci√≥n)
- Microbiolog√≠a (cultivos, antibiogramas)
- Qu√≠mica cl√≠nica (glucosa, perfil lip√≠dico, funci√≥n renal/hep√°tica)
- Inmunolog√≠a (HIV, hepatitis, marcadores tumorales)
- Hormonas (tiroides, hormonas sexuales)
- Biolog√≠a molecular (PCR, estudios gen√©ticos)
- Estudios especializados por laboratorio

**IMPORTANTE**: El campo `exam_type` en `medical_records_clean` debe ser texto libre o configurable por laboratorio, NO un enum fijo.

### Roles de Usuario (Variables por Laboratorio)

**Roles actuales en sistema:**

- `owner` - Propietario/administrador del laboratorio
- `admin` - Administrador con permisos elevados
- `employee` - Empleado general (recepcionista)
- `patologo` - M√©dico pat√≥logo
- `residente` - M√©dico residente
- `citotecno` - Citotecn√≥logo
- `medicowner` - M√©dico con privilegios de propietario

**IMPORTANTE**: Futuros laboratorios pueden necesitar roles adicionales:

- Bioqu√≠mico, Microbi√≥logo, Hemat√≥logo, etc.
- El sistema de roles debe permitir agregar nuevos roles sin modificar c√≥digo
- Considerar tabla `laboratory_roles` futura si la flexibilidad aumenta

### Workflow del Sistema (Configurable)

**Workflow base (Conspat):**

1. Recepcionista registra caso y paciente
2. M√©dico/t√©cnico procesa muestra
3. M√©dico revisa y aprueba documento (`doc_aprobado`)
4. Sistema genera PDF autom√°ticamente
5. Sistema env√≠a email al paciente (si est√° configurado)
6. Paciente puede descargar resultado con token

**Variaciones por laboratorio:**

- Algunos labs NO tienen flujo de aprobaci√≥n (directo a PDF)
- Algunos labs NO env√≠an emails autom√°ticos
- Algunos labs tienen m√∫ltiples niveles de revisi√≥n
- Algunos labs requieren firma digital
- Algunos labs integran con sistemas hospitalarios

**Configuraci√≥n por lab:**

- `config.autoSendEmailsOnApproval` - Env√≠o autom√°tico
- `config.requiresApproval` - Requiere aprobaci√≥n m√©dica
- `config.allowsDigitalSignature` - Firma digital
- M√°s configuraciones seg√∫n necesidad

---

## üöÄ Pr√≥ximos Pasos Inmediatos

1. **Crear primera migraci√≥n para `laboratories`**
2. **Probar en ambiente de desarrollo local**
3. **Validar RLS con datos de prueba**
4. **Crear segundo laboratorio de prueba**
5. **Testear aislamiento de datos**

---

## ‚ö†Ô∏è Riesgos y Mitigaciones

### Riesgo: Fuga de datos entre laboratorios

**Mitigaci√≥n**: RLS + testing exhaustivo + auditor√≠a

### Riesgo: Performance con muchos tenants

**Mitigaci√≥n**: √çndices correctos + particionamiento futuro

### Riesgo: Features incompatibles entre labs

**Mitigaci√≥n**: Feature flags granulares + versionado

### Riesgo: Migraci√≥n rompe producci√≥n actual

**Mitigaci√≥n**: Backup completo + migraci√≥n gradual + rollback plan

---

## üé® Features por Laboratorio (Ejemplo)

```json
{
	"conspat": {
		"hasInmunoRequests": true,
		"hasChangelogModule": true,
		"hasChatAI": true,
		"hasMultipleBranches": true,
		"hasCitologyStatus": true,
		"hasPatientOriginFilter": true,
		"hasRobotTracking": false
	},
	"labvargas": {
		"hasInmunoRequests": false,
		"hasChangelogModule": true,
		"hasChatAI": false,
		"hasMultipleBranches": false,
		"hasCitologyStatus": false,
		"hasPatientOriginFilter": false,
		"hasRobotTracking": true
	}
}
```

---

## üõ†Ô∏è Comandos √ötiles

```bash
# Desarrollo
pnpm dev                    # Frontend en localhost:5173
pnpm dev:server            # Backend Express en localhost:3001
pnpm dev:full              # Frontend + Backend simult√°neamente

# Build
pnpm build                 # Build de producci√≥n

# Database
supabase db reset          # Reset local database
supabase migration new NAME # Nueva migraci√≥n
supabase db push           # Push migraciones a remoto

# Testing
pnpm lint                  # ESLint
```

---

## üìû Contacto y Soporte

**Proyecto**: Solhub
**Repositorio**: GitHub (rama: developer)
**Equipo**: Desarrollo interno
**Cliente principal**: Conspat

---

**√öltima actualizaci√≥n**: 2025-10-23
**Versi√≥n del plan**: 1.0
**Estado**: Planning phase
